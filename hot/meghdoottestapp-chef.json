
{
  "AWSTemplateFormatVersion": "2010-09-09",

  "Description" : "This template will bring up a CRUD server on AWS or OpenStack and should also be able to bring up on OpenStack",
  "Parameters": {
    "KeyName": {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the web server",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "255",
      "AllowedPattern" : "[\\x20-\\x7E]*",
      "Default" : "venu",
      "ConstraintDescription" : "can contain only ASCII characters."
    },
    "InstanceType" : {
      "Description" : "WebServer EC2 instance type",
      "Type" : "String",
      "Default" : "t2.medium",
      "AllowedValues" : ["t2.medium","t1.micro","m1.small","m1.medium","m1.large","m1.xlarge","m2.xlarge","m2.2xlarge","m2.4xlarge","m3.xlarge","m3.2xlarge","c1.medium","c1.xlarge","cc1.4xlarge","cc2.8xlarge","cg1.4xlarge"],
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },
    "ImageId" : {
       "Description" : "Image id to be used for the instances",
       "Type" : "String",
       "Default" : "ami-146e2a7c",
       "ConstraintDescription" : "Must be a valid image Id"
      },

    "ChefServerURL" : {
      "Description" : "URL of Chef Server",
      "Type" : "String",
      "Default" : "https://api.opscode.com/organizations/aws-openstack"
    },
    "ChefServerPrivateKeyBucket" : {
      "Description" : "S3 bucket containing validation private key for Chef Server",
      "Type": "String",
      "Default" : "meghdoot-bucket"
    },
    "ChefServerSecurityGroup" : {
      "Description" : "Security group to get access to Opscode Chef Server",
      "Type": "String"
    },
    "SSHLocation" : {
      "Description" : " The IP address range that can be used to SSH to the EC2 instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    } 
  },

  "Resources" : {
    "VPC" : {
      "Type" : "AWS::EC2::VPC",
      "Properties" : {
        "CidrBlock" : "10.0.0.0/16",
        "Tags" : [ {"Key" : "Name", "Value" : "Meghdoot-CD-Infra"} ]
      }
    },

    "Subnet" : {
      "Type" : "AWS::EC2::Subnet",
      "DependsOn" : "VPC",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : "10.0.0.0/24",
        "AvailabilityZone" : "us-east-1a",
        "Tags" : [ {"Key" : "Name", "Value" : "Meghdoot-CD-Infra"} ]
      }
    },

    "InternetGateway" : {
      "Type" : "AWS::EC2::InternetGateway",
      "Properties" : {
        "Tags" : [ {"Key" : "Name", "Value" : "Meghdoot-CD-Infra"}]
      }
    },

    "VPCGatewayAttachment" : {
      "Type" : "AWS::EC2::VPCGatewayAttachment",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "InternetGatewayId" : { "Ref" : "InternetGateway" }
      }
    },

    "RouteTable" : {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "Tags" : [ { "Key" : "Name", "Value" : "Meghdoot-CD-Infra"} ]
      }
    },

    "Route" : {
      "Type" : "AWS::EC2::Route",
      "DependsOn" : "InternetGateway",
      "Properties" : {
        "RouteTableId" : { "Ref" : "RouteTable" },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "GatewayId" : { "Ref" : "InternetGateway" }
      }
    },

    "SubnetRouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
        "Properties" : {
          "SubnetId" : { "Ref" : "Subnet" },
          "RouteTableId" : { "Ref" : "RouteTable" }
       }
    },

    "NetworkAcl" : {
      "Type" : "AWS::EC2::NetworkAcl",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "Tags" : [ { "Key" : "Name", "Value" : "Meghdoot-CD-Infra" } ]
      }
    },

    "NetworkAclEntryForInboundSSH" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : { "Ref" : "NetworkAcl" },
        "RuleNumber": "100" ,
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0",
        "Protocol": "6",
        "PortRange": { "From":"22" , "To": "22" }
      }
    },

    "NetworkAclEntryForInboundEphemeral" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : { "Ref" : "NetworkAcl" },
        "RuleNumber": "200",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0",
        "Protocol": "6" ,
        "PortRange": { "From":"1024" , "To": "65535" }
      }
    },

    "NetworkAclEntryForInbound8080" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : { "Ref" : "NetworkAcl" },
        "RuleNumber": "300",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0",
        "Protocol": "6" ,
        "PortRange": { "From":"8080" , "To": "8080" }
      }
    },

    "NetworkAclEntryForOutboundEphemeral" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : { "Ref" : "NetworkAcl" },
        "RuleNumber": "100",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0/0",
        "Protocol": "6" ,
        "PortRange": { "From":"1024" , "To": "65535" }
      }
    },

    "NetworkAclEntryForOutboundHTTP" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : { "Ref" : "NetworkAcl" },
        "RuleNumber": "200" ,
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0/0",
        "Protocol": "6",
        "PortRange": { "From":"80" , "To": "80" }
      }
    },

    "NetworkAclEntryForOutboundHTTPS" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : { "Ref" : "NetworkAcl" },
        "RuleNumber": "300" ,
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0/0",
        "Protocol": "6",
        "PortRange": { "From":"443" , "To": "443" }
      }
    },

    "SubnetNetworkAclAssociation" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "Subnet" },
        "NetworkAclId" : { "Ref" : "NetworkAcl" }
      }
    },

    "SecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "main security group",
        "VpcId" : {"Ref" : "VPC"},
        "SecurityGroupIngress" : [
          {"IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : "0.0.0.0/0"},
          {"IpProtocol" : "tcp", "FromPort" : "8080", "ToPort" : "8080", "CidrIp" : "0.0.0.0/0"},
          {"IpProtocol" : "tcp", "FromPort" : "1024", "ToPort" : "65535", "CidrIp" : "10.0.0.0/24"}
        ],
        "Tags" : [ { "Key" : "Name", "Value" : "Meghdoot-CD-Infra" } ]
      }
    },

    "AppServer" : {
      "Type" : "AWS::EC2::EIP",
      "Properties" : {
        "InstanceId" : { "Ref" : "EC2InstanceAppServer" },
        "Domain" : "vpc"
      },
      "DependsOn" : "VPCGatewayAttachment"
    },

    "DbServer" : {
      "Type" : "AWS::EC2::EIP",
      "Properties" : {
        "InstanceId" : { "Ref" : "EC2InstanceDbServer" },
        "Domain" : "vpc"
      },
      "DependsOn" : "VPCGatewayAttachment"
    },

    "EC2InstanceAppServer" : {
      "Type" : "AWS::EC2::Instance",
      "Metadata" : {
        "AWS::CloudFormation::Init":{
          "configSets" :{
            "InstallAndRun" : ["install_cfn", "install_chefdk", "install_chef"]  
          },
          "install_cfn" : {
            "files": {
              "/etc/cfn/cfn-hup.conf": {
                "content": {"Fn::Join": ["", [
                  "[main]\n",
                  "stack=", { "Ref": "AWS::StackId"}, "\n",
                  "region=", {"Ref": "AWS::Region"}, "\n"
                ]]},
                "mode" : "000400",
                "owner" : "root",
                "group" : "root"
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                "content": { "Fn::Join": [ "", [
                  "[cfn-auto-reloader-hook]\n",
                  "triggers=post.update\n",
                  "path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init\n",
                  "action=/opt/aws/bin/cfn-init -v ",
                          "         --stack ", { "Ref" : "AWS::StackName" },
                          "         --resource LaunchConfig ",
                          "         --configsets InstallAndRun ",
                          "         --region ", { "Ref" : "AWS::Region" }, "\n"
                ]]},
                "mode"  : "000400",
                "owner" : "root",
                "group" : "root"
              }
            },
            "services" : {
              "sysvinit" : {
                "cfn-hup" : { "enabled" : "true", "ensureRunning" : "true",
                              "files" : ["/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf"] }
              }
            }
          },
          "install_chef" : {
            "sources" : {
              "/var/chef/chef-repo" : "http://github.com/opscode/chef-repo/tarball/master"
            },
            "files" : {
              "/tmp/install.sh" : {
                "source" : "https://www.opscode.com/chef/install.sh",
                "mode"  : "000400",
                "owner" : "root",
                "group" : "root"
              },
              "/var/chef/chef-repo/.chef/knife.rb" : {
                "content" : { "Fn::Join": [ "", [
                  "cookbook_path [ '/var/chef/chef-repo/cookbooks' ]\n",
                  "node_path [ '/var/chef/chef-repo/nodes' ]\n"
                ]]},
                "mode"  : "000400",
                "owner" : "root",
                "group" : "root"
              },
              "/var/chef/chef-repo/.chef/client.rb" : {
                "content" : { "Fn::Join": [ "", [
                  "cookbook_path [ '/var/chef/chef-repo/cookbooks' ]\n",
                  "node_path [ '/var/chef/chef-repo/nodes' ]\n"
                ]]},
                "mode"  : "000400",
                "owner" : "root",
                "group" : "root"
              }
            },
            "commands" : {
              "01_make_chef_readable" : {
                "command" : "chmod +rx /var/chef"
              },
              "02_install_chef" : {
                "command" : "bash /tmp/install.sh",
                "cwd"  : "/var/chef"
              },
              "03_create_node_list" : {
                "command" : "chef-client -z -c /var/chef/chef-repo/.chef/client.rb",
                "cwd" : "/var/chef/chef-repo",
                "env" : { "HOME" : "/var/chef" }
              }
            }
          },

          "install_chefdk" : {
            "packages" : {
              "rpm" : {
                "chefdk" : "https://opscode-omnibus-packages.s3.amazonaws.com/el/6/x86_64/chefdk-0.2.0-2.el6.x86_64.rpm"
              }
            }
          },
          "install_chefdk" : {
            "packages" : {
              "rpm" : {
                "chefdk" : "https://opscode-omnibus-packages.s3.amazonaws.com/el/6/x86_64/chefdk-0.2.0-2.el6.x86_64.rpm"
              }
            }
          }
        }
        },
      "Properties" : {
        "ImageId" : { "Ref" : "ImageId" },
        "InstanceType" : {"Ref" : "InstanceType"},
        "KeyName" : { "Ref" : "KeyName" },
        "SubnetId" : { "Ref" : "Subnet" },
        "SecurityGroupIds" : [ { "Ref" : "SecurityGroup" } ],
        "Tags" : [ { "Key" : "Name", "Value" : "App Server" } ],
        "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
                       "#!/bin/bash -xe\n",
                       "yum update -y aws-cfn-bootstrap\n",

                       "/opt/aws/bin/cfn-init -v ",
                       "         --stack ", { "Ref" : "AWS::StackName" },
                       "         --resource LaunchConfig ",
                       "         --configsets InstallAndRun ",
                       "         --region ", { "Ref" : "AWS::Region" }, "\n",

                       "/opt/aws/bin/cfn-signal -e $? ",
                       "         --stack ", { "Ref" : "AWS::StackName" },
                       "         --resource WebServerGroup ",
                       "         --region ", { "Ref" : "AWS::Region" }, "\n"
        ]]}}
      }
  },

    "EC2InstanceDbServer" : {
      "Type" : "AWS::EC2::Instance",
      "Properties" : {
        "ImageId" : { "Ref" : "ImageId" },
        "InstanceType" : {"Ref" : "InstanceType"},
        "KeyName" : { "Ref" : "KeyName" },
        "SubnetId" : { "Ref" : "Subnet" },
        "SecurityGroupIds" : [ { "Ref" : "SecurityGroup" } ],
        "IamInstanceProfile" : { "Ref" : "InstanceProfileForDbServer" },
        "Tags" : [ { "Key" : "Name", "Value" : "Database Server" } ]
      }
    },

    "InstanceProfileForDbServer": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [ { "Ref": "RoleForDbServer" } ]
      }
    },

    "S3Bucket" : {
      "Type" : "AWS::S3::Bucket",
      "Properties" : {
        "BucketName" : "meghdoot-s3-bucket"
      }
    },

    "RoleForDbServer" : {
      "Type" : "AWS::IAM::Role",
      "Properties" : {
        "AssumeRolePolicyDocument": {
          "Version" : "2012-10-17",
          "Statement": [ {
            "Effect" : "Allow",
            "Principal" : { "Service" : [ "ec2.amazonaws.com" ] },
            "Action" : [ "sts:AssumeRole" ]
          } ]
        },
        "Path" : "/"
      }
    },

    "PolicyForS3FullAccess": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "S3FullAccess",
        "PolicyDocument": {
          "Version" : "2012-10-17",
          "Statement": [ { "Effect": "Allow", "Action": "s3:*", "Resource": "*" } ]
        },
        "Roles": [ { "Ref": "RoleForDbServer" } ]
      }
    },

    "PolicyForCloudformationFullAccess": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "CloudformationFullAccess",
        "PolicyDocument": {
          "Version" : "2012-10-17",
          "Statement": [ { "Effect": "Allow", "Action": "cloudformation:*", "Resource": "*" } ]
        },
        "Roles": [ { "Ref": "RoleForDbServer" } ]
      }
    },

    "PolicyForEC2FullAccess": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "EC2FullAccess",
        "PolicyDocument": {
          "Version" : "2012-10-17",
          "Statement": [ { "Effect": "Allow", "Action": "ec2:*", "Resource": "*" } ]
        },
        "Roles": [ { "Ref": "RoleForDbServer" } ]
      }
    },

    "PolicyForIAMFullAccess": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "IAMFullAccess",
        "PolicyDocument": {
          "Version" : "2012-10-17",
          "Statement": [ { "Effect": "Allow", "Action": "iam:*", "Resource": "*" } ]
        },
        "Roles": [ { "Ref": "RoleForDbServer" } ]
      }
    }
  },

"Outputs" : {
    "AppServerPublicIp" : {
      "Value" : { "Fn::GetAtt" : [ "EC2InstanceAppServer", "PublicIp" ] }
    },

    "DbServerPublicIp" : {
      "Value" : { "Fn::GetAtt" : [ "EC2InstanceDbServer", "PublicIp" ] }
    },

    "AppServerPrivateIp" : {
      "Value" : { "Fn::GetAtt" : [ "EC2InstanceAppServer", "PrivateIp" ] }
    },
    "DbServerPrivateIp" : {
      "Value" : { "Fn::GetAtt" : [ "EC2InstanceDbServer", "PrivateIp" ] }
    }
  }
}